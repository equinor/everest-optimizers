diff --git a/acro/packages/colin/src/colin/ResponseFunctors.h b/acro/packages/colin/src/colin/ResponseFunctors.h
index 262737bf..160ba7dc 100644
--- a/acro/packages/colin/src/colin/ResponseFunctors.h
+++ b/acro/packages/colin/src/colin/ResponseFunctors.h
@@ -30,7 +30,10 @@
 namespace colin
 {
 
-class ResponseFunctors : public std::unary_function<const std::vector<utilib::Any>, utilib::Any >
+class ResponseFunctor
+#if __cplusplus < 201703L // std::unary_function is deprecated in C++11 and removed in C++17
+  : public std::unary_function<const std::vector<utilib::Any>, utilib::Any >
+#endif
 {
 public:
    /// Empty virtual destructor to silence compiler warnings
diff --git a/acro/packages/utilib/src/utilib/Any.h b/acro/packages/utilib/src/utilib/Any.h
index c8a295cc..12cc9156 100644
--- a/acro/packages/utilib/src/utilib/Any.h
+++ b/acro/packages/utilib/src/utilib/Any.h
@@ -1239,7 +1239,18 @@ class Any
 
   protected:
     ContainerBase *m_data;
-  };
+  }; 
+
+/// C++20 deletes std::ostream::operator << for wchar_t
+#if __cplusplus >= 202002L
+template<>
+class Any::DefaultPrinter<wchar_t> {
+public:
+  static std::ostream& print( std::ostream& os, const wchar_t& data ) {
+    return (os << static_cast<char>(data));   
+  }
+};
+#endif
 
 
 /// Override definition that avoids reference to copy constructor
@@ -1635,8 +1646,9 @@ DEFINE_FULL_ANY_EXTENSIONS(std::string);
 
 // wchar_t is not readable...
 DEFINE_DEFAULT_ANY_COMPARATOR(wchar_t);
+#if __cplusplus < 202002L
 DEFINE_DEFAULT_ANY_PRINTER(wchar_t);
-
+#endif
 // floating-point requires a special printer
 DEFINE_DEFAULT_ANY_COMPARATOR(float);
 DEFINE_DEFAULT_ANY_READER(float);
diff --git a/acro/packages/utilib/src/utilib/Parameter.h b/acro/packages/utilib/src/utilib/Parameter.h
index 0f985e15..80a25318 100644
--- a/acro/packages/utilib/src/utilib/Parameter.h
+++ b/acro/packages/utilib/src/utilib/Parameter.h
@@ -217,7 +217,11 @@ public:
     * Pointer to an object that contains a unary_function that performs a
     * callback when the parameter is set.
     */
+#if __cplusplus < 201703L   
    std::unary_function<Any, void>* callback;
+#else // std::unary_function is deprecated in C++11 and removed in C++17
+   std::function<void(Any)>* callback;
+#endif   
 
    ///
    bool is_bool;
diff --git a/acro/packages/utilib/src/utilib/ParameterSet.h b/acro/packages/utilib/src/utilib/ParameterSet.h
index 2fe06ed9..23686c80 100644
--- a/acro/packages/utilib/src/utilib/ParameterSet.h
+++ b/acro/packages/utilib/src/utilib/ParameterSet.h
@@ -38,7 +38,12 @@ class ParameterList;
 /**
  * A callback class that can be used with a ParameterSet object.
  */
-class ParamFileCallback : public std::unary_function<Any,void>
+class ParamFileCallback : public 
+#if __cplusplus < 201703L                          
+  std::unary_function<Any,void>
+#else
+  std::function<void(Any)>
+#endif
 {
 public:
 
@@ -236,7 +241,12 @@ public:
 
   /// Set a parameter callback that is called when the parameter is set
   void set_parameter_callback(const std::string& name, 
-		std::unary_function<Any,void>& func);
+#if __cplusplus < 201703L      
+		std::unary_function<Any,void>& func
+#else                 
+		std::function<void(Any)>& func
+#endif
+                );
 
   /// Set a parameter default
   void set_parameter_default(const std::string& name, const std::string& default_value);
@@ -579,7 +589,12 @@ catch (std::invalid_argument& ) {
 //
 //
 inline void ParameterSet::set_parameter_callback(const std::string& name, 
-			std::unary_function<Any,void>& func)
+#if __cplusplus < 201703L    
+			std::unary_function<Any,void>& func
+#else                        
+			std::function<void(Any)>& func
+#endif
+                        )
 {
 try {
   Parameter& param = find_parameter(name);
diff --git a/acro/packages/utilib/src/utilib/ValidateParameter.h b/acro/packages/utilib/src/utilib/ValidateParameter.h
index fdfd449c..bc41a8e2 100644
--- a/acro/packages/utilib/src/utilib/ValidateParameter.h
+++ b/acro/packages/utilib/src/utilib/ValidateParameter.h
@@ -49,7 +49,12 @@ public:
  * to simplify their create_option() declaration by omitting the second
  * template parameter.
  */
-class ParameterValidatorFunction : public std::unary_function<Any,bool>
+class ParameterValidatorFunction : public 
+#if __cplusplus < 201703L                                   
+  std::unary_function<Any,bool>
+#else 
+  std::function<bool(Any)>
+#endif  
 {
 };
 
@@ -91,7 +96,12 @@ public:
  * Class that validates a lower bound of a parameter.
  */
 template <class Type>
-class ParameterLowerBound : public std::unary_function<Any,bool>
+class ParameterLowerBound : public 
+#if __cplusplus < 201703L                            
+  std::unary_function<Any,bool>
+#else
+  std::function<bool(Any)>
+#endif
 {
 public:
 
@@ -115,7 +125,12 @@ public:
  * Class that validates an upper bound of a parameter.
  */
 template <class Type>
-class ParameterUpperBound : public std::unary_function<Any,bool>
+class ParameterUpperBound : public 
+#if __cplusplus < 201703L                            
+  std::unary_function<Any,bool>
+#else
+  std::function<bool(Any)>
+#endif
 {
 public:
 
@@ -139,7 +154,12 @@ public:
  * Class that validates a lower and upper bounds of a parameter.
  */
 template <class Type>
-class ParameterBounds : public std::unary_function<Any,bool>
+class ParameterBounds : public 
+#if __cplusplus < 201703L                            
+  std::unary_function<Any,bool>
+#else
+  std::function<bool(Any)>
+#endif                        
 {
 public:
 
@@ -168,7 +188,12 @@ public:
  * Class that validates a non-negative parameter.
  */
 template <class Type>
-class ParameterNonnegative : public std::unary_function<Any,bool>
+class ParameterNonnegative : public 
+#if __cplusplus < 201703L                            
+  std::unary_function<Any,bool>
+#else
+  std::function<bool(Any)>
+#endif  
 {
 public:
 
@@ -189,7 +214,12 @@ public:
  * Class that validates a positive parameter.
  */
 template <class Type>
-class ParameterPositive : public std::unary_function<Any,bool>
+class ParameterPositive : public 
+#if __cplusplus < 201703L                          
+  std::unary_function<Any,bool>
+#else
+  std::function<bool(Any)>
+#endif  
 {
 public:
 
diff --git a/acro/packages/utilib/src/utilib/bimap.h b/acro/packages/utilib/src/utilib/bimap.h
index 5ce4a051..a33744bc 100644
--- a/acro/packages/utilib/src/utilib/bimap.h
+++ b/acro/packages/utilib/src/utilib/bimap.h
@@ -85,7 +85,7 @@
  * does it in a safe manner. Starting with GCC 3.1, an annoying warning is
  * issued in this situation. Workarounded it thanks to a tip by Andrew Pollard.
  */
-
+#if __cplusplus < 201101L
 #if defined(__GNUC__)&&(__GNUC__>3||(__GNUC__==3&&__GNUC_MINOR__>= 1))
 #define BIMAP_OFFSETOF_9B698EF9_C6E9_4BC4_A7D2_5B4D71155761(type,member) \
 (__extension__                         \
@@ -103,18 +103,26 @@
 #else
 #define BIMAP_OFFSETOF_9B698EF9_C6E9_4BC4_A7D2_5B4D71155761(type,member) offsetof(type,member)
 #endif
+#else // C++11 introduces offsetof macro
+#define BIMAP_OFFSETOF_9B698EF9_C6E9_4BC4_A7D2_5B4D71155761(type,member) offsetof(type,member)
+#endif
 
 /* MSVC++ 6.0 do not support allocator::rebind; in these cases, the only
  * option is use the original allocator_type unrebound, which VC++ 6.0
  * accepts merrily nevertheless.
  */
 
+#if __cplusplus < 202002L
 #if defined(_MSC_VER)&&_MSC_VER==1200 /* MSVC++ 6.0 */
 #define BIMAP_REBIND_9B698EF9_C6E9_4BC4_A7D2_5B4D71155761(type1,type2) type1
 #else
 #define BIMAP_REBIND_9B698EF9_C6E9_4BC4_A7D2_5B4D71155761(type1,type2) \
 typename type1::template rebind<type2>::other
 #endif
+#else // std::allocator::rebind is deprecated in C++17 and removed in C++20 
+#define BIMAP_REBIND_9B698EF9_C6E9_4BC4_A7D2_5B4D71155761(type1,type2) \
+typename std::allocator_traits<type1>::template rebind_alloc<type2>
+#endif 
 
 namespace utilib{
 
@@ -811,7 +819,10 @@ public:
      * compatible with the weaker value_compare implemented by maps.
      */
 
-    class value_compare:public std::binary_function<value_type,value_type,bool>
+    class value_compare
+#if __cplusplus < 201703L      
+      : public std::binary_function<value_type,value_type,bool>
+#endif      
     {
     public:
       bool operator()(const value_type& x,const value_type& y)
@@ -1262,7 +1273,10 @@ public:
         const to_type_,
         const from_type_>   value_type;
 
-    class value_compare:public std::binary_function<value_type,value_type,bool>
+    class value_compare
+#if __cplusplus < 201703L      
+      : public std::binary_function<value_type,value_type,bool>
+#endif      
     {
     public:
       bool operator()(const value_type& x,const value_type& y)
@@ -2076,7 +2090,7 @@ public:
   }
 
   /* inverse copy ctor (from a bimap<to_type,from_type>) */
-
+#if __cplusplus < 201703L
 #if defined(_MSC_VER)&&_MSC_VER==1200 /* MSVC++ 6.0 */
   /* no allocator::rebind, assume allocator_type==std::allocator */
 
@@ -2101,6 +2115,20 @@ public:
   explicit bimap(const inv_bimap& r):
     super(r.to.key_comp(),r.from.key_comp(),r.get_allocator())
 #endif
+#else // std::allocator::rebind was deprecated in C++17 and removed in C++20
+typedef
+  bimap<
+    to_type_, from_type_,
+    to_compare, from_compare,
+    typename std::allocator_traits<allocator_type>::template rebind_alloc<
+      direct_pair<const to_type_, const from_type_> >
+  > inv_bimap;
+
+explicit bimap(const inv_bimap& r):
+  super(r.to.key_comp(), r.from.key_comp(), r.get_allocator())
+#endif
+
+
 
 /* body of bimap(const inv_bimap& r) follows */
 
